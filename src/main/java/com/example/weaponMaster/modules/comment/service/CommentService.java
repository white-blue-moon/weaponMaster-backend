package com.example.weaponMaster.modules.comment.service;

import com.example.weaponMaster.api.comments.dto.ReqCommentsDto;
import com.example.weaponMaster.modules.account.constant.LogActType;
import com.example.weaponMaster.modules.account.constant.LogContentsType;
import com.example.weaponMaster.modules.account.constant.UserType;
import com.example.weaponMaster.modules.account.entity.UserInfo;
import com.example.weaponMaster.modules.account.repository.UserInfoRepository;
import com.example.weaponMaster.modules.account.service.UserLogService;
import com.example.weaponMaster.modules.article.constant.ArticleDetailType;
import com.example.weaponMaster.modules.article.constant.ArticleType;
import com.example.weaponMaster.modules.article.constant.CategoryType;
import com.example.weaponMaster.modules.article.entity.Article;
import com.example.weaponMaster.modules.article.repository.ArticleRepository;
import com.example.weaponMaster.modules.comment.dto.CommentDto;
import com.example.weaponMaster.modules.comment.entity.Comment;
import com.example.weaponMaster.modules.comment.repository.CommentRepository;
import com.example.weaponMaster.modules.common.constant.MyURL;
import com.example.weaponMaster.modules.common.dto.ApiResponse;
import com.example.weaponMaster.modules.slack.constant.AdminSlackChannelType;
import com.example.weaponMaster.modules.slack.constant.UserSlackNoticeType;
import com.example.weaponMaster.modules.slack.service.SlackService;
import com.example.weaponMaster.modules.slack.util.HtmlUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Objects;

@Service
@RequiredArgsConstructor
public class CommentService {

    private final ArticleRepository  articleRepository;
    private final CommentRepository  commentRepository;
    private final UserInfoRepository userInfoRepository;
    private final UserLogService     userLogService;
    private final SlackService       slackService;

    @Transactional
    public ApiResponse<Void> createComment(ReqCommentsDto request) {
        // Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ ÌôïÏù∏
        Article article = articleRepository.findById(request.getArticleId()).orElse(null);
        if (article == null) {
            throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä Îì±Î°ù ÏóêÎü¨] Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§. userId: %s, articleID: %d", request.getUserId(), request.getArticleId()));
        }

        // ÎåìÍ∏Ä Îì±Î°ù Í∞ÄÎä• ÏÉÅÌÉú ÌôïÏù∏
        validateOrThrow(article, request);

        // ÎåìÍ∏Ä Îì±Î°ù
        Comment savedComment = saveComment(request);
        userLogService.saveLog(request.getUserId(), request.getIsAdmin(), LogContentsType.ARTICLE, LogActType.CREATE_COMMENT, (short) (int) request.getArticleId(), (short) (int) savedComment.getId());

        // 1:1 Í≤åÏãúÍ∏ÄÏù∏ Í≤ΩÏö∞
        if (isPrivateContact(article)) {
            handlePrivateContactComment(article, request, savedComment);
            return ApiResponse.success();
        }

        return ApiResponse.success();
    }

    private void validateOrThrow(Article article, ReqCommentsDto request) {
        // Í≥µÏßÄÏÇ¨Ìï≠/ÏóÖÎç∞Ïù¥Ìä∏ Í≤åÏãúÍ∏ÄÏóêÎäî ÎåìÍ∏Ä Í∏∞Ïû¨ Î∂àÍ∞Ä
        if (isNewsAndNotCommentable(article)) {
            throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä Îì±Î°ù ÏóêÎü¨] Í≥µÏßÄÏÇ¨Ìï≠/ÏóÖÎç∞Ïù¥Ìä∏ Í≤åÏãúÍ∏ÄÏóê ÎåìÍ∏Ä Îì±Î°ù ÏãúÎèÑ userId: %s, articleID: %d, categoryType: %d", request.getUserId(), request.getArticleId(), article.getCategoryType()));
        }

        // Í¥ÄÎ¶¨ÏûêÎ™®Îìú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïú†Ï†ÄÏù∏ÏßÄ ÌôïÏù∏
        if (request.getIsAdmin()) {
            UserInfo userInfo = userInfoRepository.findByUserId(request.getUserId());
            if (userInfo == null) {
                throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä Îì±Î°ù ÏóêÎü¨] ÏÇ¨Ïö©ÏûêÏùò Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï† Ïàò ÏóÜÏäµÎãàÎã§. userId: %s, articleID: %d", request.getUserId(), request.getArticleId()));
            }

            if (userInfo.getUserType() != UserType.ADMIN) {
                throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä Îì±Î°ù ÏóêÎü¨] Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. userId: %s, userType: %d, articleID: %d", request.getUserId(), userInfo.getUserType(), request.getArticleId()));
            }
        }
    }

    private void handlePrivateContactComment(Article article, ReqCommentsDto request, Comment savedComment) {
        // 1:1 Î¨∏Ïùò > Í¥ÄÎ¶¨ÏûêÏùò ÏµúÏ¥à ÎåìÍ∏Ä Í∏∞Ïû¨Î©¥ ÎãµÎ≥Ä ÏôÑÎ£å ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Ïú†Ï†ÄÏóêÍ≤å Ïä¨Îûô ÏïåÎ¶º Î∞úÏÜ°
        if (request.getIsAdmin()) {
            if (article.getArticleDetailType() == ArticleDetailType.SERVICE_CENTER.PRIVATE_CONTACT.WAITING) {
                article.setArticleDetailType(ArticleDetailType.SERVICE_CENTER.PRIVATE_CONTACT.ANSWERED);
                articleRepository.save(article);
                slackService.sendMessage(article.getUserId(), UserSlackNoticeType.WEAPON_MASTER_SERVICE_ALERT, getUserNoticeMessage(article, savedComment));
                return;
            }
        }

        // 1:1 Î¨∏Ïùò > Ïú†Ï†ÄÍ∞Ä Ï∂îÍ∞Ä ÎåìÍ∏ÄÏùÑ Í∏∞Ïû¨ÌñàÎã§Î©¥ Í¥ÄÎ¶¨Ïûê Ïä¨Îûô ÏïåÎ¶º Î∞úÏÜ°
        if (isArticleOwner(request, article)) {
            slackService.sendMessageAdmin(AdminSlackChannelType.PRIVATE_CONTACT_NOTICE, getAdminNoticeMessage(article, savedComment));
            return;
        }

        throw new IllegalArgumentException(String.format("[1:1Î¨∏Ïùò ÎåìÍ∏Ä Îì±Î°ù ÏóêÎü¨] Í¥ÄÎ¶¨Ïûê/ÏÜåÏú†ÏûêÍ∞Ä ÏïÑÎãàÏßÄÎßå ÎåìÍ∏Ä Îì±Î°ù ÏãúÎèÑ userId: %s, articleID: %d, author: %s", request.getUserId(), request.getArticleId(), article.getUserId()));
    }

    private Comment saveComment(ReqCommentsDto request) {
        // ÎåìÍ∏Ä Ï†ÄÏû•
        Comment comment = new Comment(
                request.getUserId(),
                request.getArticleId(),
                request.getReCommentId(),
                request.getContents(),
                request.getIsAdmin()
        );
        Comment savedComment = commentRepository.save(comment);

        // Í≤åÏãúÎ¨º Ï†ïÎ≥¥ ÌôïÏù∏
        Article article = articleRepository.findById(request.getArticleId()).orElse(null);
        if (article == null) {
            throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä Îì±Î°ù ÏóêÎü¨] Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§. userId: %s, articleID: %d", request.getUserId(), request.getArticleId()));
        }

        // Í≤åÏãúÎ¨º ÎåìÍ∏Ä Í∞úÏàò ÏàòÏ†ï
        int commentCount = commentRepository.countByArticleId(request.getArticleId());
        article.setCommentCount(commentCount);
        articleRepository.save(article);

        return savedComment;
    }

    private String getUserNoticeMessage(Article article, Comment userComment) {
        // 1. HTML ÌÉúÍ∑∏ Ï†úÍ±∞ Î∞è Ï†ïÎ¶¨
        String plainText = HtmlUtil.getPlainText(userComment.getContents());

        // 2. Í∏∏Ïù¥ Ï†úÌïú
        int maxLength = 80;
        if (plainText.length() > maxLength) {
            plainText = plainText.substring(0, maxLength) + "...";
        }

        // Ïù¥Î™®ÏßÄÏΩîÎìú: üí¨
        String link = String.format("%s/service/%d", MyURL.WEAPON_MASTER, article.getId());
        String message = String.format(
                "Î¨∏Ïùò Ï£ºÏã† ÎÇ¥Ïö©Ïóê ÎåÄÌïú ÎãµÎ≥ÄÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.\n" +
                        "`\uD83D\uDCAC 1:1 Î¨∏Ïùò ÎãµÎ≥ÄÏôÑÎ£å ÏïåÎ¶º` - <%s|ÎßÅÌÅ¨ Î∞îÎ°úÍ∞ÄÍ∏∞>\n" +
                        "```" +
                        "Ï†úÎ™©: %s\n" +
                        "ÎãµÎ≥Ä: %s" +
                        "```",
                link,
                article.getTitle(),
                plainText
        );
        return message;
    }

    private String getAdminNoticeMessage(Article article, Comment userComment) {
        // 1. HTML ÌÉúÍ∑∏ Ï†úÍ±∞ Î∞è Ï†ïÎ¶¨
        String plainText = HtmlUtil.getPlainText(userComment.getContents());

        // 2. Í∏∏Ïù¥ Ï†úÌïú
        int maxLength = 80;
        if (plainText.length() > maxLength) {
            plainText = plainText.substring(0, maxLength) + "...";
        }

        // Ïù¥Î™®ÏßÄÏΩîÎìú: üí¨
        String link = String.format("%s/service/%d", MyURL.WEAPON_MASTER, article.getId());
        String message = String.format(
                "`\uD83D\uDCAC 1:1 Î¨∏Ïùò ÎåìÍ∏Ä Îì±Î°ù` - <%s|ÎßÅÌÅ¨ Î∞îÎ°úÍ∞ÄÍ∏∞>\n" +
                        "```" +
                        "Ï†úÎ™©: %s\n" +
                        "Ïù¥Î¶Ñ: %s\n" +
                        "ÎåìÍ∏Ä: %s" +
                        "```",
                link,
                article.getTitle(),
                article.getUserId(),
                plainText
        );
        return message;
    }

    private boolean isNewsAndNotCommentable(Article article) {
        if (article.getCategoryType() == CategoryType.NEWS) {
            if (article.getArticleType() == ArticleType.NEWS.NOTICE || article.getArticleType() == ArticleType.NEWS.UPDATE) {
                return true;
            }
        }

        return false;
    }

    private boolean isPrivateContact(Article article) {
        if (article.getCategoryType() == CategoryType.SERVICE_CENTER) {
            if (article.getArticleType() == ArticleType.SERVICE_CENTER.PRIVATE_CONTACT) {
                return true;
            }
        }

        return false;
    }

    private boolean isArticleOwner(ReqCommentsDto request, Article article) {
        if (Objects.equals(request.getUserId(), article.getUserId())) {
            return true;
        }

        return false;
    }

    @Transactional
    public ApiResponse<CommentDto[]> getCommentList(Integer articleId) {
        Comment[] comments = commentRepository.findByArticleId(articleId);
        if (comments == null || comments.length == 0) {
            return ApiResponse.success(new CommentDto[0]);
        }

        CommentDto[] commentDtoList = Arrays.stream(comments)
                .map(this::convertToDto)
                .toArray(CommentDto[]::new);

        return ApiResponse.success(commentDtoList);
    }

    @Transactional
    public ApiResponse<Void> deleteComment(ReqCommentsDto request, Integer id) {
        Comment comment = commentRepository.findById(id).orElse(null);
        if (comment == null) {
            throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä ÏÇ≠Ï†ú ÏóêÎü¨] ÏÇ≠Ï†úÌïòÎ†§Îäî ÎåìÍ∏Ä Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§. userId: %s, comment ID: %d", request.getUserId(), id));
        }

        // 1. ÎåìÍ∏Ä ÏÜåÏú†ÏûêÍ∞Ä ÎßûÎäîÏßÄ ÌôïÏù∏
        if (!comment.getUserId().equals(request.getUserId())) {
            UserInfo userInfo = userInfoRepository.findByUserId(request.getUserId());
            if (userInfo == null) {
                throw new IllegalArgumentException("[ÎåìÍ∏Ä ÏÇ≠Ï†ú ÏóêÎü¨] User not found, userId: " + request.getUserId());
            }

            // 2. ÏÜåÏú†ÏûêÍ∞Ä Îã§Î•º Í≤ΩÏö∞ Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÏûàÎäîÏßÄ ÌôïÏù∏
            if (!request.getIsAdmin() || userInfo.getUserType() != UserType.ADMIN) {
                throw new IllegalArgumentException(String.format("[ÎåìÍ∏Ä ÏÇ≠Ï†ú ÏóêÎü¨] Í∂åÌïú ÏóÜÏùå userId: %s, comment ID: %d", request.getUserId(), id));
            }
        }

        // 3. ÎåìÍ∏Ä ÏÇ≠Ï†ú ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
        comment.setIsDeleted(true);
        Comment savedComment = commentRepository.save(comment);
        userLogService.saveLog(request.getUserId(), request.getIsAdmin(), LogContentsType.ARTICLE, LogActType.DELETE_COMMENT, (short)(int)request.getArticleId(), (short)(int)savedComment.getId());

        return ApiResponse.success();
    }

    private CommentDto convertToDto(Comment comment) {
        return CommentDto.builder()
                .id(comment.getId())
                .userId(comment.getUserId())
                .articleId(comment.getArticleId())
                .reCommentId(comment.getReCommentId())
                .contents(comment.getContents())
                .isDeleted(comment.getIsDeleted())
                .isAdminMode(comment.getIsAdminMode())
                .createDate(comment.getCreateDate())
                .updateDate(comment.getUpdateDate())
                .build();
    }
}

